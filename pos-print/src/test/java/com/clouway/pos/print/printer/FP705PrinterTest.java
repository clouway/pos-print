package com.clouway.pos.print.printer;


import com.clouway.pos.print.core.PeriodType;
import com.clouway.pos.print.core.RegisterState;
import com.clouway.pos.print.printer.FakeFP705.Flow;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.net.Socket;
import java.time.LocalDateTime;
import java.util.Collections;

import static com.clouway.pos.print.core.Receipt.newReceipt;
import static com.clouway.pos.print.core.ReceiptItem.newItem;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;

/**
 * @author Miroslav Genov (miroslav.genov@clouway.com)
 */
public class FP705PrinterTest {
  private FakeFP705 fakeFP705 = new FakeFP705();

  @Before
  public void connect() throws IOException {
    fakeFP705.startAsync().awaitRunning();
  }

  @After
  public void disconnect() throws IOException {
    fakeFP705.stopAsync().awaitTerminated();
  }

  @Test
  public void getTime() throws Exception {
    fakeFP705.prepareFlows(
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x33, 0x3E, 0x05, 0x30, 0x31, 0x3C,
          0x32, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x34, 0x3B, 0x20, 0x30, 0x30, 0x33, 0x3E, 0x30, 0x09, 0x31, 0x30,
          0x2D, 0x30, 0x34, 0x2D, 0x31, 0x37, 0x20, 0x32, 0x31, 0x3A, 0x30, 0x37, 0x3A, 0x35,
          0x32, 0x20, 0x44, 0x53, 0x54, 0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x80,
          (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x3A,
          0x38, 0x32, 0x03
        }
      )
    );

    assertThat(printer().getTime(), is(equalTo("10-04-17 21:07:52 DST\t")));
  }

  @Test
  public void printReceiptWithSingleItem() throws Exception {

    fakeFP705.prepareFlows(

      //Get status
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x34, 0x3A, 0x05, 0x30, 0x31, 0x3B, 0x3F, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x82, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, // status
          0x05, 0x30, 0x36, 0x3B, 0x3B, 0x03
        }
      ),
      // Open text receipt
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x32, 0x36, 0x05,
          0x30, 0x31, 0x3B, 0x39, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x32, 0x36, 0x30, 0x09, 0x31, 0x35, 0x39, 0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0xA0, (byte) 0x80,
          (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3D, 0x3E, 0x03
        }
      ),
      // Print Prefix Lines: "Клиент: Огнян Огнянов"
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x34, 0x30, 0x21, 0x30, 0x30, 0x32, 0x3A, (byte) 0xCA, (byte) 0xEB,
          (byte) 0xE8, (byte) 0xE5, (byte) 0xED, (byte) 0xF2, 0x3A, 0x20, (byte) 0xCE, (byte) 0xE3,
          (byte) 0xED, (byte) 0xFF, (byte) 0xED, 0x20, (byte) 0xC3, (byte) 0xEE, (byte) 0xF0,
          (byte) 0xE0, (byte) 0xED, (byte) 0xEE, (byte) 0xE2, 0x09, 0x05, 0x31, 0x32, 0x36, 0x32, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x21, 0x30, 0x30, 0x32, 0x3A, 0x30, 0x09, 0x04, (byte) 0x80,
          (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80,
          0x05, 0x30, 0x36, 0x33, 0x37, 0x03,
        }
      ),
      // Print Receipt Item: "Ред 1" -  1 x 0.10
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x34, 0x32, 0x22, 0x30, 0x30, 0x32, 0x3A, (byte) 0xD0, (byte) 0xE5, (byte) 0xE4, 0x20, 0x31, 0x20, 0x2D, 0x20, 0x31, 0x2E, 0x30, 0x30, 0x20, 0x58, 0x20, 0x30, 0x2E, 0x31, 0x30, 0x20, 0x42, 0x47, 0x4E, 0x09, 0x05, 0x30, 0x38, 0x32, 0x36, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x24, 0x30, 0x30, 0x32, 0x3A, 0x30, 0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80,
          (byte) 0x80, 0x05, 0x30, 0x36, 0x33, 0x3A, 0x03
        }
      ),
      // Print Suffix Line: "Общо: 0.10 BGN"
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x23, 0x30, 0x30, 0x32, 0x3A, (byte) 0xCE, (byte) 0xE1, (byte) 0xF9, (byte) 0xEE, 0x3A, 0x20, 0x30, 0x2E, 0x31, 0x30, 0x20, 0x42, 0x47, 0x4E, 0x09, 0x05, 0x30, 0x37, 0x36, 0x3F, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x27, 0x30, 0x30, 0x32, 0x3A, 0x30, 0x09, 0x04, (byte) 0x80,
          (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80,
          0x05, 0x30, 0x36, 0x33, 0x3D, 0x03,
        }
      ),
      // Close Text Receipt
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x24, 0x30, 0x30, 0x32, 0x37, 0x05, 0x30, 0x31, 0x3B, 0x3E, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x28, 0x30, 0x30, 0x32, 0x37, 0x30, 0x09, 0x31, 0x36, 0x31,
          0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
          (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3C, 0x30, 0x03
        }
      )
    );

    printer().printReceipt(newReceipt()
      .currency("BGN")
      .prefixLines(Collections.singletonList(
        "Клиент: Огнян Горанов"
      ))
      .suffixLines(Collections.singletonList("Общо: 0.10 BGN"))
      .addItems(
        newItem().name("Ред 1").quantity(1d).price(0.10d).build()
      ).build()
    );
  }

  @Test
   public void usesItemDepartment() throws Exception {

     fakeFP705.prepareFlows(

       //Get status
       new Flow(
         new byte[]{
           0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x34, 0x3A, 0x05, 0x30, 0x31, 0x3B, 0x3F, 0x03
         },
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x09, 0x31, 0x36, 0x32,
           0x09, 0x04,
           (byte) 0x80, (byte) 0x80, (byte) 0x82, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, // status
           0x05, 0x30, 0x36, 0x3B, 0x3B, 0x03
         }
       ),
       // Open text receipt
       new Flow(
         new byte[]{
           0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x32, 0x36, 0x05,
           0x30, 0x31, 0x3B, 0x39, 0x03
         },
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x32, 0x36, 0x30, 0x09, 0x31, 0x35, 0x39, 0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0xA0, (byte) 0x80,
           (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3D, 0x3E, 0x03
         }
       ),
       // Print Prefix Lines: "Клиент: Огнян Огнянов"
       new Flow(
         new byte[]{
           0x01, 0x30, 0x30, 0x34, 0x30, 0x21, 0x30, 0x30, 0x32, 0x3A, (byte) 0xCA, (byte) 0xEB,
           (byte) 0xE8, (byte) 0xE5, (byte) 0xED, (byte) 0xF2, 0x3A, 0x20, (byte) 0xCE, (byte) 0xE3,
           (byte) 0xED, (byte) 0xFF, (byte) 0xED, 0x20, (byte) 0xC3, (byte) 0xEE, (byte) 0xF0,
           (byte) 0xE0, (byte) 0xED, (byte) 0xEE, (byte) 0xE2, 0x09, 0x05, 0x31, 0x32, 0x36, 0x32, 0x03
         },
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x35, 0x21, 0x30, 0x30, 0x32, 0x3A, 0x30, 0x09, 0x04, (byte) 0x80,
           (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80,
           0x05, 0x30, 0x36, 0x33, 0x37, 0x03,
         }
       ),
       // Print Receipt Item: "Ред 1" -  1 x 0.10
       new Flow(
         new byte[]{
           0x01, 0x30, 0x30, 0x34, 0x32, 0x22, 0x30, 0x30, 0x32, 0x3A, (byte) 0xD0, (byte) 0xE5, (byte) 0xE4, 0x20, 0x31, 0x20, 0x2D, 0x20, 0x31, 0x2E, 0x30, 0x30, 0x20, 0x58, 0x20, 0x30, 0x2E, 0x31, 0x30, 0x20, 0x42, 0x47, 0x4E, 0x09, 0x05, 0x30, 0x38, 0x32, 0x36, 0x03
         },
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x35, 0x24, 0x30, 0x30, 0x32, 0x3A, 0x30, 0x09, 0x04,
           (byte) 0x80, (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80,
           (byte) 0x80, 0x05, 0x30, 0x36, 0x33, 0x3A, 0x03
         }
       ),
       // Print Suffix Line: "Общо: 0.10 BGN"
       new Flow(
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x39, 0x23, 0x30, 0x30, 0x32, 0x3A, (byte) 0xCE, (byte) 0xE1, (byte) 0xF9, (byte) 0xEE, 0x3A, 0x20, 0x30, 0x2E, 0x31, 0x30, 0x20, 0x42, 0x47, 0x4E, 0x09, 0x05, 0x30, 0x37, 0x36, 0x3F, 0x03
         },
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x35, 0x27, 0x30, 0x30, 0x32, 0x3A, 0x30, 0x09, 0x04, (byte) 0x80,
           (byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80,
           0x05, 0x30, 0x36, 0x33, 0x3D, 0x03,
         }
       ),
       // Close Text Receipt
       new Flow(
         new byte[]{
           0x01, 0x30, 0x30, 0x32, 0x3A, 0x24, 0x30, 0x30, 0x32, 0x37, 0x05, 0x30, 0x31, 0x3B, 0x3E, 0x03
         },
         new byte[]{
           0x01, 0x30, 0x30, 0x33, 0x39, 0x28, 0x30, 0x30, 0x32, 0x37, 0x30, 0x09, 0x31, 0x36, 0x31,
           0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
           (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3C, 0x30, 0x03
         }
       )
     );

     printer().printReceipt(newReceipt()
       .currency("BGN")
       .prefixLines(Collections.singletonList(
         "Клиент: Огнян Горанов"
       ))
       .suffixLines(Collections.singletonList("Общо: 0.10 BGN"))
       .addItems(
         newItem().name("Ред 1").quantity(1d).price(0.10d).build()
       ).build()
     );
   }


  @Test
  public void printReceipt() throws Exception {

    fakeFP705.prepareFlows(
      //Get status
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x34, 0x3A, 0x05, 0x30, 0x31, 0x3B, 0x3F, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x82, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, // status
          0x05, 0x30, 0x36, 0x3B, 0x3B, 0x03
        }
      ),
      // Open fiscal receipt
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x34, 0x20, 0x30, 0x30, 0x33, 0x30, 0x31, 0x09, 0x30, 0x30, 0x30,
          0x30, 0x09, 0x31, 0x09, 0x09, 0x05, 0x30, 0x32, 0x3F, 0x35, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
          (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3B, 0x3B, 0x03
        }
      ),
      // Print Prefix Lines: "Линия 1"
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x32, 0x21, 0x30, 0x30, 0x33, 0x36, (byte) 0xCB, (byte) 0xE8,
          (byte) 0xED, (byte) 0xE8, (byte) 0xFF, 0x20, 0x31, 0x09, 0x05, 0x30, 0x36, 0x39,
          0x35, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x21, 0x30, 0x30, 0x33, 0x36, 0x30, 0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80,
          (byte) 0x80, 0x05, 0x30, 0x36, 0x31, 0x3C, 0x03,
        }
      ),
      // Print FISCAL ITEM
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x34, 0x36, 0x22, 0x30, 0x30, 0x33, 0x31, 0x48, 0x53, 0x49, 0x20, 0x38, 0x30, 0x2F, 0x34, 0x30, 0x09, 0x31,
          0x09, 0x30, 0x2E, 0x31, 0x30, 0x09, 0x31, 0x2E, 0x30, 0x30, 0x30, 0x09, 0x30, 0x09, 0x09, 0x31, 0x09, 0x05, 0x30, 0x36, 0x33,
          0x33, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x23, 0x30, 0x30, 0x33, 0x31, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
          (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3B, 0x3F, 0x03
        }
      ),
      // Print suffix line
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x32, 0x23, 0x30, 0x30, 0x33, 0x36, (byte) 0xCB, (byte) 0xE8, (byte) 0xED, (byte) 0xE8,
          (byte) 0xFF, 0x20, 0x32, 0x09, 0x05, 0x30, 0x36, 0x39, 0x38, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x25, 0x30, 0x30, 0x33, 0x36, 0x30, 0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80,
          (byte) 0x80, 0x05, 0x30, 0x36, 0x32, 0x30, 0x03
        }
      ),
      // Total Command
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x31, 0x24, 0x30, 0x30, 0x33, 0x35, 0x30, 0x09, 0x30, 0x2E, 0x31, 0x30,
          0x09, 0x05, 0x30, 0x32, 0x3B, 0x36, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x3C, 0x26, 0x30, 0x30, 0x33, 0x35, 0x30, 0x09, 0x44, 0x09, 0x30,
          0x2E, 0x30, 0x30, 0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80,
          (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x37, 0x33, 0x3B, 0x03
        }
      ),
      // Close Fiscal Receipt
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x24, 0x30, 0x30, 0x33, 0x38, 0x05, 0x30, 0x31, 0x3C, 0x30, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x26, 0x30, 0x30, 0x33, 0x38, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
          (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3C, 0x31, 0x03
        }
      )
    );

    printer().printFiscalReceipt(
      newReceipt()
        .prefixLines(Collections.singletonList(
          "Линия 1"
        ))
        .suffixLines(Collections.singletonList("Линия 2"))
        .addItems(
          newItem().name("HSI 80/40").quantity(1d).price(0.10d).department("1").build()
        ).build()
    );
  }


  @Test
  public void printReceiptAndGetNearEndOfPaper() throws Exception {

    fakeFP705.prepareFlows(

      //Get status
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x20, 0x30, 0x30, 0x34, 0x3A, 0x05, 0x30, 0x31, 0x3B, 0x3F, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x82, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, // status
          0x05, 0x30, 0x36, 0x3B, 0x3B, 0x03
        }
      ),

      // Open Fiscal Receipt and Device Replies with Status that
      // indicates that paper is near to it's end: NEAR_END_OF_PAPER
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x34, 0x20, 0x30, 0x30, 0x33, 0x30, 0x31, 0x09, 0x30, 0x30, 0x30, 0x30, 0x09, 0x31, 0x09, 0x09, 0x05, 0x30, 0x32, 0x3F, 0x35, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x82, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, // status
          0x05, 0x30, 0x36, 0x3B, 0x3B, 0x03
        }
      ),
      // Print Prefix Lines: "Линия 1"
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x32, 0x21, 0x30, 0x30, 0x33, 0x36, (byte) 0xCB, (byte) 0xE8,
          (byte) 0xED, (byte) 0xE8, (byte) 0xFF, 0x20, 0x31, 0x09, 0x05, 0x30, 0x36, 0x39,
          0x35, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x21, 0x30, 0x30, 0x33, 0x36, 0x30, 0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80,
          (byte) 0x80, 0x05, 0x30, 0x36, 0x31, 0x3C, 0x03,
        }
      ),
      // Print FISCAL ITEM
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x34, 0x36, 0x22, 0x30, 0x30, 0x33, 0x31, 0x48, 0x53, 0x49, 0x20, 0x38, 0x30, 0x2F,
          0x34, 0x30, 0x09, 0x31, 0x09, 0x30, 0x2E, 0x31, 0x30, 0x09, 0x31, 0x2E, 0x30, 0x30, 0x30, 0x09, 0x30,
          0x09, 0x09, 0x30, 0x09, 0x05, 0x30, 0x36, 0x33, 0x32, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x23, 0x30, 0x30, 0x33, 0x31, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
          (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3B, 0x3F, 0x03
        }
      ),
      // Print suffix line
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x32, 0x23, 0x30, 0x30, 0x33, 0x36, (byte) 0xCB, (byte) 0xE8, (byte) 0xED,
          (byte) 0xE8, (byte) 0xFF, 0x20, 0x32, 0x09, 0x05, 0x30, 0x36, 0x39, 0x38, 0x03,
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x35, 0x25, 0x30, 0x30, 0x33, 0x36, 0x30, 0x09, 0x04,
          (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80, (byte) 0x86, (byte) 0x9A, (byte) 0x80,
          (byte) 0x80, 0x05, 0x30, 0x36, 0x32, 0x30, 0x03
        }
      ),
      // Total Command
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x31, 0x24, 0x30, 0x30, 0x33, 0x35, 0x30, 0x09, 0x30, 0x2E, 0x31, 0x30, 0x09, 0x05,
          0x30, 0x32, 0x3B, 0x36, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x3C, 0x26, 0x30, 0x30, 0x33, 0x35, 0x30, 0x09, 0x44, 0x09, 0x30,
          0x2E, 0x30, 0x30, 0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x88, (byte) 0x80,
          (byte) 0x86, (byte) 0x9A, (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x37, 0x33, 0x3B, 0x03
        }
      ),
      // Close Fiscal Receipt
      new Flow(
        new byte[]{
          0x01, 0x30, 0x30, 0x32, 0x3A, 0x24, 0x30, 0x30, 0x33, 0x38, 0x05, 0x30, 0x31, 0x3C, 0x30, 0x03
        },
        new byte[]{
          0x01, 0x30, 0x30, 0x33, 0x39, 0x26, 0x30, 0x30, 0x33, 0x38, 0x30, 0x09, 0x31, 0x36, 0x32,
          0x09, 0x04, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x86, (byte) 0x9A,
          (byte) 0x80, (byte) 0x80, 0x05, 0x30, 0x36, 0x3C, 0x31, 0x03
        }
      )
    );

    printer().printFiscalReceipt(
      newReceipt()
        .prefixLines(Collections.singletonList(
          "Линия 1"
        ))
        .suffixLines(Collections.singletonList("Линия 2"))
        .addItems(
          newItem().name("HSI 80/40").quantity(1d).price(0.10d).build()
        ).build()
    );
  }

  @Test
  public void fiscalReportForPeriod() throws Exception {
    fakeFP705.prepareFlows(
      new Flow(
        new byte[]{0x01, 0x30, 0x30, 0x35, 0x34, 0x20, 0x30, 0x30, 0x35, 0x3E, 0x31, 0x09, 0x32, 0x30, 0x31, 0x37, 0x2D, 0x30, 0x34, 0x2D, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x09, 0x32, 0x30, 0x31, 0x37, 0x2D, 0x30, 0x34, 0x2D, 0x31, 0x33, 0x54, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x3A, 0x30, 0x30, 0x09, 0x05, 0x30, 0x39, 0x3B, 0x32, 0x03},
        new byte[]{0x16} //response is not relative
      ));
    printer().reportForPeriod(LocalDateTime.of(2017, 4, 1, 0, 0, 0), LocalDateTime.of(2017, 4, 13, 0, 0), PeriodType.EXTENDED);
  }

  @Test
  public void fiscalReportWithKeep() throws Exception {
    fakeFP705.prepareFlows(
      new Flow(
        new byte[]{0x01, 0x30, 0x30, 0x33, 0x30, 0x20, 0x30, 0x30, 0x36, 0x39, 0x31, 0x09, 0x31, 0x09, 0x30, 0x09, 0x05, 0x30, 0x32, 0x36, 0x34, 0x03},
        new byte[]{0x16} //response is not relative
      ));
    printer().reportForOperator("1", RegisterState.KEEP);

  }

  @Test
  public void fiscalReportWithClear() throws Exception {
    fakeFP705.prepareFlows(
      new Flow(
        new byte[]{0x01, 0x30, 0x30, 0x33, 0x30, 0x20, 0x30, 0x30, 0x36, 0x39, 0x31, 0x09, 0x31, 0x09, 0x31, 0x09, 0x05, 0x30, 0x32, 0x36, 0x35, 0x03},
        new byte[]{0x16} //response is not relative
      ));
    printer().reportForOperator("1", RegisterState.CLEAR);
  }

  private FP705Printer printer() throws IOException {
    Socket socket = new Socket("localhost", fakeFP705.port());
    return new FP705Printer(socket.getInputStream(), socket.getOutputStream(), Collections.emptyList());
  }
}